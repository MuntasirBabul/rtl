import cocotb
import cocotb_coverage
import collections 
import pytest
import random
import numpy as np

from cocotb.regression import TestFactory
from cocotb.triggers import Timer, RisingEdge, ReadOnly
from cocotb_coverage.coverage import *
from cocotb_coverage.crv import *

log = cocotb.logging.getLogger("cocotb.test")
class Packet(Randomized):
	def __init__(self, data):
		Randomized.__init__(self)
		self.d = data
		self.add_rand("d : ", list(range(0,1)))


DFF_Coverage = coverage_section(
CoverPoint("top.d",
			vname 		= "D input",
			bins 		= [0,1],
			bins_labels = ["Low", "High"]),
CoverPoint("top.q",
			vname 		= "Q output",
			bins 		= [0,1],
			bins_labels = ["Low", "High"])
)

async def test_dff_cov(dut):
	# Generating and Running clock
	clock = Clock(dut.clk, 2, units="ns")
	cocotb.fork(clock.start())
	await RisingEdge(dut.clk)
	dut.a_rst <= 1
	dut.d <= 0

	await Timer (1000)
	dut.a_rst <= 0
	await Timer (1000)
	dut.a_rst <= 1

	for i in range(100):
		pkt = Packet();
		pkt.randomize()
		d = np.random.randint(0,1)

	await driver.send(pkt)
	await RisingEdge(dut.clk)

	# print coverage report
	coverage_db.report_coverage(log.info, bins=False)
	# export
	coverage_db.export_to_xml(filename="coverage_pkt_switch.xml")
	coverage_db.export_to_yaml(filename="coverage_pkt_switch.yml")

tf = TestFactory(test_function = test_dff_cov)
tf.generate_tests()

